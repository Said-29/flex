generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Partner {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  edi_version        String  @default("X12")
  delimiters         String  @default("*")
  EOL                String  @default("~")
  type_of_connection String  @default("FTP")
  PO_Test            Json    @default("{}")
  hidden             Boolean @default(true)

  EDI_documents EDI_Document[]
  partnerships  partnership[]
}

model Client {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  partnerships partnership[]
}

model partnership {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  uploaded_documents document[]
  status             String     @default("In Process")

  clientId  String @db.ObjectId
  partnerId String @db.ObjectId

  client  Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  partner Partner @relation(fields: [partnerId], references: [id], onDelete: Cascade)
}

model document {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  type          String @unique
  json_document String
  status        String @default("Pending")

  partnershipId String      @db.ObjectId
  partnership   partnership @relation(fields: [partnershipId], references: [id], onDelete: Cascade)

  errors Json @default("{}")
}

model EDI_Document {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  type      String
  template  Boolean @default(true)
  mandatory Boolean @default(true)

  structure Segment[]

  partnerId String  @db.ObjectId
  partner   Partner @relation(fields: [partnerId], references: [id], onDelete: Cascade)
}

model Segment {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  mandatory Boolean @default(true)
  max       Int
  template  Boolean @default(true)
  rules     Json    @default("{}")

  isLoop       Boolean
  parentLoopId String?   @db.ObjectId
  parentLoop   Segment?  @relation("LoopSegments", fields: [parentLoopId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  loopSegment  Segment[] @relation("LoopSegments")

  EDI_DocumentId String?       @db.ObjectId
  EDI_Document   EDI_Document? @relation(fields: [EDI_DocumentId], references: [id], onDelete: Cascade)
}

// model EDI_Document {
//   id        String  @id @default(auto()) @map("_id") @db.ObjectId
//   type      String
//   template  Boolean @default(true)
//   mandatory Boolean @default(true)

//   structure StructureItem[]

//   partnerId String    @db.ObjectId
//   partner   Partner   @relation(fields: [partnerId], references: [id], onDelete: Cascade)
//   Segment   Segment[]
// }

// type StructureItem {
//   id        String
//   name      String
//   mandatory Boolean @default(true)
//   max       Int
//   template  Boolean @default(true)
//   rules     Json    @default("{}")

//   isLoop       Boolean
//   parentLoopId String? @db.ObjectId
//   // parentLoop   Segment?  @relation("LoopSegments", fields: [parentLoopId], references: [id], onDelete: NoAction, onUpdate: NoAction)
//   // loopSegment  Segment[] @relation("LoopSegments")
// }
